package ËÑË÷;

import java.util.*;
import java.math.*;
import java.io.*;

public class _tt {
	static int INF = 0x3f3f3f3f;
	static int N = 109000 , M = 2*N;
	static int n,m;
	static int[] arr = new int[N];
	static Node[] tree = new Node[4*N];
	static void pushUp(int u) {
		tree[u].val = tree[u<<1].val + tree[u<<1|1].val;
	}
	static void build(int u,int l,int r) {
		if(l==r) tree[u] = new Node(l,r,arr[l]);
		else {
			tree[u] = new Node(l,r,0);
			int mid = l+r>>1;
			build(u<<1,l,mid);
			build(u<<1|1,mid+1,r);
			pushUp(u);
		}
	}
	static void modify(int u,int idx,int v) {
		if(tree[u].l == tree[u].r) 
			tree[u].val+=v;
		else {
			int mid = tree[u].l + tree[u].r >> 1;
			if(idx<=mid) modify(u<<1,idx,v);
			else modify(u<<1|1,idx,v);
			pushUp(u);
		}
	}
	
	static int query(int u,int l,int r) {
		if(tree[u].l>=l && tree[u].r<=r)
			return tree[u].val;
		else {
			int mid = tree[u].l + tree[u].r >> 1;
			int sum = 0;
			if(l<=mid) sum += query(u<<1, l, r);
			if(r>=mid+1) sum += query(u<<1|1,l,r);
			return sum;
		}
	}
	
	public static void main(String[] sss) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		for(int i=1;i<=n;i++) {
			arr[i] = sc.nextInt();
		}
		build(1,1,n);
		while(m-->0) {
			int k = sc.nextInt();
			int a = sc.nextInt();
			int b = sc.nextInt();
			if(k==0) {
				System.out.println(query(1, a, b));
			}else {
				modify(1,a,b);
			}
		}
	}
}
class Node{
	int l,r,val;
	public Node(int l,int r,int val) {
		this.l = l;
		this.r = r;
		this.val = val;
	}
}
